{"version":3,"sources":["components/Note.js","components/Notify.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notify","message","baseUrl","token","axios","get","then","response","data","newObject","config","headers","Authorization","post","id","request","put","console","log","newToken","login","credentials","a","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","username","setUsername","password","setPassword","user","setUser","useEffect","noteServices","initialNote","noteAppUser","window","sessionStorage","getItem","JSON","parse","addNote","event","preventDefault","noteObject","Date","toISOString","Math","random","returnedNote","concat","handleNoteChange","e","target","value","notesToShow","filter","handleLogin","loginServise","setItem","stringify","setTimeout","href","removeItem","onSubmit","type","name","onChange","map","i","find","changeNote","catch","err","ReacrDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d6b47ea.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n    const label = note.important \n        ? \"make unimportant\" \n        : \"make important\"\n\n    return (\n        <li className=\"note\">\n            {note.content}   \n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n};\n\nexport default Note","const Notify = ({message}) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className='error'>\n            {message}\n        </div>\n    )\n}\n\nexport default Notify","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request =  axios.get(baseUrl);\n  return request.then(response => response.data);\n}\n\nconst create = newObject => {\n  const config = {\n    headers: {Authorization: token}\n  }\n\n  const request = axios.post(baseUrl, newObject, config)\n  return request.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n  const request =  axios.put(`${baseUrl}/${id}`, newObject)\n  console.log(request);\n  return request.then(response => response.data);\n}\n\nexport default { getAll, create, update, setToken }","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n    const response = await axios.post(baseUrl, credentials)\n    return response.data\n}\n\nexport default { login }","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport Notify from './components/Notify'\nimport noteServices from './services/notes'\nimport loginServise from './services/login'\n\nimport './index.css'\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n  \n  // fetch notes from db.json server\n  useEffect(() => {\n      noteServices\n        .getAll()\n        .then( initialNote => {\n            setNotes(initialNote)\n        })\n  }, [])\n\n  useEffect(() => {\n    const noteAppUser = window.sessionStorage.getItem('loggedNoteappUser')\n    if (noteAppUser) {\n      const user = JSON.parse(noteAppUser)\n      setUser(user)\n      noteServices.setToken(user.token)\n    }\n  }, [])\n\n  // add note to the db.json server\n  const addNote = (event) => {\n    event.preventDefault()\n\n    const noteObject = {\n      content: newNote,\n      data: new Date().toISOString(),\n      important: Math.random() < 0.5,\n     \n    }\n\n    noteServices\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n\n  }\n\n  const toggleImportance = id => {\n    const note = notes.find(note => note.id ===id);\n    const changeNote = {...note, important: !note.important }\n    //console.log(`it is note with id : ${id}`)\n    \n    noteServices\n        .update(id, changeNote)\n        .then (returnedNote => {\n          console.log(\"udpated\");\n          setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        })\n        .catch(err => {\n          console.log(\"error occured\", err);\n        })\n  }\n\n  const handleNoteChange = (e) => {\n    setNewNote(e.target.value)\n  }\n\n  const notesToShow = showAll \n        ? notes\n        : notes.filter(note => note.important === true)\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n\n    try {\n      const user = await loginServise.login({\n        username, password\n      })\n\n      window.sessionStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      )\n      noteServices.setToken(user.token)\n      setUser(user)\n      \n      setPassword('')\n      setUsername('')\n    } catch (exception) {\n      setErrorMessage('Wrong Credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const loginForm = () => (\n    <form onSubmit={handleLogin}>\n        <div>\n          username\n            <input \n            type='text'\n            name='username'\n            value={username}\n            onChange={({target}) => setUsername(target.value)}\n            />\n        </div>\n        <div>\n          password\n            <input\n            type='password'\n            name='password'\n            value={password}\n            onChange={({target}) => setPassword(target.value)}\n            />\n        </div>\n        <button type='submit'> login </button>\n      </form>\n  )\n\n  const noteForm = () => (\n    <form onSubmit={addNote}>\n        <input \n          value={newNote}\n          onChange={handleNoteChange}\n          />\n        <button type=\"submit\">save</button>\n      </form>   \n  )\n  \n  const logout = (event) => {\n    window.sessionStorage.removeItem('loggedNoteappUser')\n    setUser(null)\n  }\n\n  return (\n    <div>\n      <button href='http://localhost:3000' onClick={logout}>log out</button>\n      <h1>Notes</h1>\n      <Notify message={errorMessage} />\n\n      {user === null ? \n          loginForm() :\n         <div>\n           <p>{user.name} loged-in</p>\n           {noteForm()}\n         </div>\n      }\n\n      <button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? 'important': 'all'}\n      </button>\n      <ul>\n        {notesToShow.map((note, i) => \n          <Note \n              key={i}\n              note={note}\n              toggleImportance={() => toggleImportance(note.id)}\n              />\n        )}\n      </ul>\n    </div>\n  )\n}\n\n  export default App","import ReacrDOM from 'react-dom'\nimport App from './App'\n\nReacrDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}